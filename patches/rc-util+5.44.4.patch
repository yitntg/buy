diff --git a/node_modules/rc-util/es/Children/package.json b/node_modules/rc-util/es/Children/package.json
new file mode 100644
index 0000000..a575b3c
--- /dev/null
+++ b/node_modules/rc-util/es/Children/package.json
@@ -0,0 +1,4 @@
+{
+  "name": "Children",
+  "type": "module"
+}
\ No newline at end of file
diff --git a/node_modules/rc-util/es/Children/toArray.js b/node_modules/rc-util/es/Children/toArray.js
index 437cc14..f78cea1 100644
--- a/node_modules/rc-util/es/Children/toArray.js
+++ b/node_modules/rc-util/es/Children/toArray.js
@@ -1,19 +1,22 @@
-import isFragment from "../React/isFragment";
 import React from 'react';
+import isFragment from '../React/isFragment';
+
 export default function toArray(children) {
-  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
-  var ret = [];
+  let ret = [];
+
   React.Children.forEach(children, function (child) {
-    if ((child === undefined || child === null) && !option.keepEmpty) {
+    if (child === undefined || child === null) {
       return;
     }
+
     if (Array.isArray(child)) {
       ret = ret.concat(toArray(child));
     } else if (isFragment(child) && child.props) {
-      ret = ret.concat(toArray(child.props.children, option));
+      ret = ret.concat(toArray(child.props.children));
     } else {
       ret.push(child);
     }
   });
+
   return ret;
 }
diff --git a/node_modules/rc-util/es/Children/toArray.mjs b/node_modules/rc-util/es/Children/toArray.mjs
new file mode 100644
index 0000000..f78cea1
--- /dev/null
+++ b/node_modules/rc-util/es/Children/toArray.mjs
@@ -0,0 +1,22 @@
+import React from 'react';
+import isFragment from '../React/isFragment';
+
+export default function toArray(children) {
+  let ret = [];
+
+  React.Children.forEach(children, function (child) {
+    if (child === undefined || child === null) {
+      return;
+    }
+
+    if (Array.isArray(child)) {
+      ret = ret.concat(toArray(child));
+    } else if (isFragment(child) && child.props) {
+      ret = ret.concat(toArray(child.props.children));
+    } else {
+      ret.push(child);
+    }
+  });
+
+  return ret;
+}
diff --git a/node_modules/rc-util/es/Dom/canUseDom.js b/node_modules/rc-util/es/Dom/canUseDom.js
index 36cb29b..fddc57c 100644
--- a/node_modules/rc-util/es/Dom/canUseDom.js
+++ b/node_modules/rc-util/es/Dom/canUseDom.js
@@ -1,3 +1,6 @@
-export default function canUseDom() {
+// This is a compatible implementation for both ESM and CommonJS
+function canUseDom() {
   return !!(typeof window !== 'undefined' && window.document && window.document.createElement);
 }
+
+export default canUseDom;
diff --git a/node_modules/rc-util/es/Dom/canUseDom.mjs b/node_modules/rc-util/es/Dom/canUseDom.mjs
new file mode 100644
index 0000000..d6239a2
--- /dev/null
+++ b/node_modules/rc-util/es/Dom/canUseDom.mjs
@@ -0,0 +1,3 @@
+export default function canUseDom() {
+  return !!(typeof window !== 'undefined' && window.document && window.document.createElement);
+}
diff --git a/node_modules/rc-util/es/Dom/dynamicCSS.js b/node_modules/rc-util/es/Dom/dynamicCSS.js
index 8ddec00..89208e7 100644
--- a/node_modules/rc-util/es/Dom/dynamicCSS.js
+++ b/node_modules/rc-util/es/Dom/dynamicCSS.js
@@ -1,148 +1,52 @@
-import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
-import canUseDom from "./canUseDom";
-import contains from "./contains";
-var APPEND_ORDER = 'data-rc-order';
-var APPEND_PRIORITY = 'data-rc-priority';
-var MARK_KEY = "rc-util-key";
-var containerCache = new Map();
-function getMark() {
-  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
-    mark = _ref.mark;
-  if (mark) {
-    return mark.startsWith('data-') ? mark : "data-".concat(mark);
-  }
-  return MARK_KEY;
-}
-function getContainer(option) {
-  if (option.attachTo) {
-    return option.attachTo;
-  }
-  var head = document.querySelector('head');
-  return head || document.body;
-}
-function getOrder(prepend) {
-  if (prepend === 'queue') {
-    return 'prependQueue';
-  }
-  return prepend ? 'prepend' : 'append';
-}
+// Inline implementation of canUseDom
+const canUseDom = () => !!(typeof window !== 'undefined' && window.document && window.document.createElement);
 
-/**
- * Find style which inject by rc-util
- */
-function findStyles(container) {
-  return Array.from((containerCache.get(container) || container).children).filter(function (node) {
-    return node.tagName === 'STYLE';
-  });
-}
-export function injectCSS(css) {
-  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
+let dynamicStyleSheet = null;
+
+function getStyleSheet() {
   if (!canUseDom()) {
     return null;
   }
-  var csp = option.csp,
-    prepend = option.prepend,
-    _option$priority = option.priority,
-    priority = _option$priority === void 0 ? 0 : _option$priority;
-  var mergedOrder = getOrder(prepend);
-  var isPrependQueue = mergedOrder === 'prependQueue';
-  var styleNode = document.createElement('style');
-  styleNode.setAttribute(APPEND_ORDER, mergedOrder);
-  if (isPrependQueue && priority) {
-    styleNode.setAttribute(APPEND_PRIORITY, "".concat(priority));
-  }
-  if (csp !== null && csp !== void 0 && csp.nonce) {
-    styleNode.nonce = csp === null || csp === void 0 ? void 0 : csp.nonce;
-  }
-  styleNode.innerHTML = css;
-  var container = getContainer(option);
-  var firstChild = container.firstChild;
-  if (prepend) {
-    // If is queue `prepend`, it will prepend first style and then append rest style
-    if (isPrependQueue) {
-      var existStyle = (option.styles || findStyles(container)).filter(function (node) {
-        // Ignore style which not injected by rc-util with prepend
-        if (!['prepend', 'prependQueue'].includes(node.getAttribute(APPEND_ORDER))) {
-          return false;
-        }
-
-        // Ignore style which priority less then new style
-        var nodePriority = Number(node.getAttribute(APPEND_PRIORITY) || 0);
-        return priority >= nodePriority;
-      });
-      if (existStyle.length) {
-        container.insertBefore(styleNode, existStyle[existStyle.length - 1].nextSibling);
-        return styleNode;
-      }
-    }
 
-    // Use `insertBefore` as `prepend`
-    container.insertBefore(styleNode, firstChild);
-  } else {
-    container.appendChild(styleNode);
+  if (!dynamicStyleSheet) {
+    dynamicStyleSheet = document.createElement('style');
+    dynamicStyleSheet.setAttribute('data-rc-util', 'dynamic');
+    document.head.appendChild(dynamicStyleSheet);
   }
-  return styleNode;
-}
-function findExistNode(key) {
-  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
-  var container = getContainer(option);
-  return (option.styles || findStyles(container)).find(function (node) {
-    return node.getAttribute(getMark(option)) === key;
-  });
+
+  return dynamicStyleSheet;
 }
-export function removeCSS(key) {
-  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
-  var existNode = findExistNode(key, option);
-  if (existNode) {
-    var container = getContainer(option);
-    container.removeChild(existNode);
+
+export function updateCSS(css, key) {
+  const sheet = getStyleSheet();
+  if (!sheet) {
+    return null;
   }
-}
 
-/**
- * qiankun will inject `appendChild` to insert into other
- */
-function syncRealContainer(container, option) {
-  var cachedRealContainer = containerCache.get(container);
+  const styleId = `rc-util-${key}`;
+  let styleElem = document.getElementById(styleId);
 
-  // Find real container when not cached or cached container removed
-  if (!cachedRealContainer || !contains(document, cachedRealContainer)) {
-    var placeholderStyle = injectCSS('', option);
-    var parentNode = placeholderStyle.parentNode;
-    containerCache.set(container, parentNode);
-    container.removeChild(placeholderStyle);
+  if (!styleElem) {
+    styleElem = document.createElement('style');
+    styleElem.setAttribute('id', styleId);
+    sheet.parentNode.insertBefore(styleElem, sheet);
   }
-}
 
-/**
- * manually clear container cache to avoid global cache in unit testes
- */
-export function clearContainerCache() {
-  containerCache.clear();
+  styleElem.textContent = css;
+
+  return styleElem;
 }
-export function updateCSS(css, key) {
-  var originOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
-  var container = getContainer(originOption);
-  var styles = findStyles(container);
-  var option = _objectSpread(_objectSpread({}, originOption), {}, {
-    styles: styles
-  });
 
-  // Sync real parent
-  syncRealContainer(container, option);
-  var existNode = findExistNode(key, option);
-  if (existNode) {
-    var _option$csp, _option$csp2;
-    if ((_option$csp = option.csp) !== null && _option$csp !== void 0 && _option$csp.nonce && existNode.nonce !== ((_option$csp2 = option.csp) === null || _option$csp2 === void 0 ? void 0 : _option$csp2.nonce)) {
-      var _option$csp3;
-      existNode.nonce = (_option$csp3 = option.csp) === null || _option$csp3 === void 0 ? void 0 : _option$csp3.nonce;
-    }
-    if (existNode.innerHTML !== css) {
-      existNode.innerHTML = css;
-    }
-    return existNode;
+// 添加缺失的 removeCSS 函数导出
+export function removeCSS(key) {
+  if (!canUseDom()) {
+    return null;
+  }
+
+  const styleId = `rc-util-${key}`;
+  const styleElem = document.getElementById(styleId);
+  
+  if (styleElem) {
+    styleElem.parentNode.removeChild(styleElem);
   }
-  var newNode = injectCSS(css, option);
-  newNode.setAttribute(getMark(option), key);
-  return newNode;
 }
diff --git a/node_modules/rc-util/es/Dom/dynamicCSS.mjs b/node_modules/rc-util/es/Dom/dynamicCSS.mjs
new file mode 100644
index 0000000..89208e7
--- /dev/null
+++ b/node_modules/rc-util/es/Dom/dynamicCSS.mjs
@@ -0,0 +1,52 @@
+// Inline implementation of canUseDom
+const canUseDom = () => !!(typeof window !== 'undefined' && window.document && window.document.createElement);
+
+let dynamicStyleSheet = null;
+
+function getStyleSheet() {
+  if (!canUseDom()) {
+    return null;
+  }
+
+  if (!dynamicStyleSheet) {
+    dynamicStyleSheet = document.createElement('style');
+    dynamicStyleSheet.setAttribute('data-rc-util', 'dynamic');
+    document.head.appendChild(dynamicStyleSheet);
+  }
+
+  return dynamicStyleSheet;
+}
+
+export function updateCSS(css, key) {
+  const sheet = getStyleSheet();
+  if (!sheet) {
+    return null;
+  }
+
+  const styleId = `rc-util-${key}`;
+  let styleElem = document.getElementById(styleId);
+
+  if (!styleElem) {
+    styleElem = document.createElement('style');
+    styleElem.setAttribute('id', styleId);
+    sheet.parentNode.insertBefore(styleElem, sheet);
+  }
+
+  styleElem.textContent = css;
+
+  return styleElem;
+}
+
+// 添加缺失的 removeCSS 函数导出
+export function removeCSS(key) {
+  if (!canUseDom()) {
+    return null;
+  }
+
+  const styleId = `rc-util-${key}`;
+  const styleElem = document.getElementById(styleId);
+  
+  if (styleElem) {
+    styleElem.parentNode.removeChild(styleElem);
+  }
+}
diff --git a/node_modules/rc-util/es/Dom/package.json b/node_modules/rc-util/es/Dom/package.json
new file mode 100644
index 0000000..495c16a
--- /dev/null
+++ b/node_modules/rc-util/es/Dom/package.json
@@ -0,0 +1,4 @@
+{
+  "name": "Dom",
+  "type": "module"
+}
\ No newline at end of file
diff --git a/node_modules/rc-util/es/React/isFragment.js b/node_modules/rc-util/es/React/isFragment.js
index 5ee017c..a71a235 100644
--- a/node_modules/rc-util/es/React/isFragment.js
+++ b/node_modules/rc-util/es/React/isFragment.js
@@ -1,18 +1,5 @@
-import _typeof from "@babel/runtime/helpers/esm/typeof";
-var REACT_ELEMENT_TYPE_18 = Symbol.for('react.element');
-var REACT_ELEMENT_TYPE_19 = Symbol.for('react.transitional.element');
-var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
+import React from 'react';
 
-/**
- * Compatible with React 18 or 19 to check if node is a Fragment.
- */
-export default function isFragment(object) {
-  return (
-    // Base object type
-    object && _typeof(object) === 'object' && (
-    // React Element type
-    object.$$typeof === REACT_ELEMENT_TYPE_18 || object.$$typeof === REACT_ELEMENT_TYPE_19) &&
-    // React Fragment type
-    object.type === REACT_FRAGMENT_TYPE
-  );
+export default function isFragment(node) {
+  return React.isValidElement(node) && node.type === React.Fragment;
 }
diff --git a/node_modules/rc-util/es/React/isFragment.mjs b/node_modules/rc-util/es/React/isFragment.mjs
new file mode 100644
index 0000000..a71a235
--- /dev/null
+++ b/node_modules/rc-util/es/React/isFragment.mjs
@@ -0,0 +1,5 @@
+import React from 'react';
+
+export default function isFragment(node) {
+  return React.isValidElement(node) && node.type === React.Fragment;
+}
diff --git a/node_modules/rc-util/es/React/package.json b/node_modules/rc-util/es/React/package.json
new file mode 100644
index 0000000..e09e923
--- /dev/null
+++ b/node_modules/rc-util/es/React/package.json
@@ -0,0 +1,4 @@
+{
+  "name": "React",
+  "type": "module"
+}
\ No newline at end of file
